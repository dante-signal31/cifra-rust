name: test_and_deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Run test to check application is ready to be packaged and if so build it for release.
  tests:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Install rust toolchain.
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly
          override: true
          
      - name: Add smart cache to rust.
        uses: Swatinem/rust-cache@v1

        # Cifra needs sqlite so we should install it before running tests. Actually we don't because
        # GitHub ubuntu runner includes it by default.
      - name: Test app.
        uses: actions-rs/cargo@v1.0.1
        with:
          # Use test-threads 1 to not parallelize tests. You cannot parallelize tests because of database collisions with multiple tests running at once. 
          command: test
          args: -- --test-threads 1

      - name: As tests passed, get package version and tag.
        id: version_tag
        uses: dante-signal31/rust-app-version@v1.0.0

    outputs:
      package_tag: ${{ steps.version_tag.outputs.app_version }}
  
  # If push is cleanly tested then marge with master branch.
  merge_staging_and_master:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
      
      - name: Merge staging -> uat
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: staging
          target_branch: master
          github_token: ${{secrets.GITHUB_TOKEN}}
    
  # If tests are OK publish library in crates.io.
  deploy_crates_io:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
      
      - name: Install rust toolchain.
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly
          override: true
          
      - name: Add smart cache to rust.
        uses: Swatinem/rust-cache@v1
      
      - name: Publish to crates.io.
        uses: actions-rs/cargo@v1.0.1
        with:
          command: publish
          args: --token ${{secrets.CRATES_IO_TOKEN}}
  
  # If tests are OK generate a debian package.
  generate_deb_package:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2
      
      - name: Install rust toolchain.
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly
          override: true
          
      - name: Add smart cache to rust.
        uses: Swatinem/rust-cache@v1
      
      - name: Install cargo deb.
        uses: actions-rs/cargo@v1.0.1
        with:
          command: install
          args: cargo-deb

      - name: Generate man page to include in debian package.
        uses: dante-signal31/markdown2man@v1.0.0
        with:
          markdown_file: README.md
          manpage_name: cifra
          manpage_section: 1
          manpage_folder: man/
          
      - name: Generate debian package.
        uses: actions-rs/cargo@v1.0.1
        with:
          command: deb
      
      - name: Store generated package.
        uses: actions/upload-artifact@v2.2.4
        with: 
          name: cifra_debian_package
          path: target/debian/*.deb
  
  # Upload generated package to PackageCloud repository.
  deploy_debian_package:
    runs-on: ubuntu-latest
    needs: [generate_deb_package, tests]
    steps:
      - name: Retrieve generated debian package.
        uses: actions/download-artifact@v2.0.10
        with:
          name: cifra_debian_package
      
      - name: Get package name.
        shell: bash
        run: |
          echo "DEB_PACKAGE=$(ls *.deb)" >> $GITHUB_ENV

      - name: Upload package to PackageCloud.io.
        uses: danielmundi/upload-packagecloud@v1
        with:
          package-name: ${{env.DEB_PACKAGE}}
          packagecloud-username: dante-signal31
          packagecloud-repo: cifra-rust
          packagecloud-distrib: ubuntu/focal
          packagecloud-token: ${{secrets.PACKAGECLOUD_TOKEN}}

      - name: Upload to GitHub releases.
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{env.DEB_PACKAGE}}
          token: ${{secrets.GITHUB_TOKEN}}
          tag: ${{needs.tests.outputs.package_tag}}

